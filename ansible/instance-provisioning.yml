---
- name: Create user
  hosts: all
  remote_user: root
  tasks:
  - name: Create zenswarm user
    user:
      name: zenswarm
      shell: /sbin/nologin

- name: Deploy oracles
  hosts: all
  remote_user: root
  become: true
  become_user: zenswarm
  vars:
    repo: https://github.com/dyne/restroom-vmlet-template
    basepath: /zenswarm
    # the following variables are similar to the one in acme-certificate.yml
    letsencrypt_key: /etc/letsencrypt/keys/{{ domain_name }}.key
    letsencrypt_cert: /etc/letsencrypt/certs/{{ domain_name }}.crt

  tasks:
  - name: Create basepath
    become_user: root
    ansible.builtin.file:
      path: "{{ basepath }}/"
      state: directory
      owner: zenswarm
      group: zenswarm

  - name: Read external ipv4
    uri:
      url: https://ifconfig.me/ip
      return_content: yes
    register: externa_ip

  - set_fact: hostname="{{externa_ip.content}}"

  - name: Current host used
    debug:
      msg: "{{ hostname }}"

  - name: Load subscriptions
    set_fact:
      subscriptions: "{{ subscriptions|d([]) + [_item] }}"
    loop: "{{ lookup('file', subs_file).splitlines() }}"
    vars:
      _array: "{{ item.split() }}"
      _item: "{{ {'from': _array.0, 'to': _array.1} }}"

  - name: Update and upgrade apt packages
    become_user: root
    apt:
      upgrade: "yes"
      update_cache: yes
      cache_valid_time: 86400 # One day

  - name: Copy private contract (executed by zenroom)
    copy:
      src: private-contracts
      dest: "{{ basepath }}/"

  - name: Check if node is installed
    package:
      name: nodejs
      state: present
    check_mode: true
    register: node_check
  - name: Download node setup script
    get_url: url=https://deb.nodesource.com/setup_16.x dest=/tmp mode=755
    when: node_check is failed
  - name: Setup Node.js repository
    become_user: root
    command: /tmp/setup_16.x
    when: node_check is failed

  - name: Install required packages from apt
    become_user: root
    ansible.builtin.package:
      name:
        - git
        - python
        - make
        - libczmq-dev
        - nodejs
        - rsync
      state: latest

  - name: Install yarn
    community.general.npm:
      name: yarn
      global: yes
      state: latest

  - name: Install pm2
    community.general.yarn:
      name: pm2
      global: yes
      state: latest

  - name: Install gyp cache
    community.general.npm:
      name: node-gyp-cache
      global: yes
      state: latest

  - name: Config node_gyp
    command: npm config set node_gyp node-gyp-cache

  - name: Stop running oracles
    command: pm2 kill

  # rm -f "~/.pm2/logs/restroom-mw-*"
  - name: Remove old logs
    ansible.builtin.file:
      path: ~/.pm2/logs
      state: absent

  # recreate the old directory of oracles
  # - name: Remove old vmlets directory (single packages inside the workspace)
  #   become_user: root
  #   ansible.builtin.file:
  #     path: "{{ basepath }}/vmlets"
  #     state: absent

  - name: Create base directory
    ansible.builtin.file:
      path: "{{ basepath }}/vmlets"
      state: directory

  - name: Copy package.json (workspace)
    copy:
      src: package.json
      dest: "{{ basepath }}"

  # In the next rules the variables are equal
  - name: Copy restroom template
    copy:
      src: "restroom-vmlet-template/restroom.mjs"
      dest: "{{ wd }}/"
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Copy blockchain db
    copy:
      src: "restroom-vmlet-template/blockchain_db.json"
      dest: "{{ wd }}/"
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Copy package.json (vmlet)
    template:
      src: "../files/restroom-vmlet-template/package.json.j2"
      dest: "{{ wd }}/package.json"
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Create directory of contracts
    file:
      path: "{{ wd }}/contracts"
      state: directory
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Copy contracts (permissions may be wrong)
    synchronize:
      src: contracts
      dest: "{{ wd }}"
      owner: no
      group: no
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Fix contracts permissions
    become_user: root
    file:
      dest: "{{ wd }}/contracts"
      owner: zenswarm
      group: zenswarm
      recurse: yes
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Create .env for each vmlet
    blockinfile:
      block: |
        CUSTOM_404_MESSAGE=nothing to see here
        ZENCODE_DIR="{{ wd }}/contracts"
        FILES_DIR={{ wd }}
        CHAIN_EXT=chain
        ANNOUNCE_URL="{{ announce_url | default('') }}"
        DEANNOUNCE_URL="{{ deannounce_url | default('') }}"
        # OPENAPI=true
        COUNTRY="{{ country }}"
        HOST="{{ hostname }}"
        PRIVATE_ZENCODE_DIR="{{ basepath }}/private-contracts"
        SUBSCRIPTIONS="{{ subscriptions[item].from | default('')}}"
        L0_DEST="{{ subscriptions[item].to | default('') }}"
        YML_EXT=yml
        TLS_KEY={{ letsencrypt_key }}
        TLS_CRT={{ letsencrypt_cert }}
      path: "{{ wd }}/.env"
      create: yes
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  - name: Update packages of vmlet
    community.general.yarn:
      path: "{{ wd }}"
      state: latest
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"

  ## I kill pm2, so it is not necessary to stop each instance
  # - name: Stop oracle in pm2 again!
  # command: pm2 delete {{ vmlet_name }}
  # loop: "{{ range(0, nodes) | list }}"
  # vars:
  # vmlet_name: "restroom-mw-{{ item }}"
  #  wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"
  - name: Set current nonce into redis
    uri:
      url: https://apiroom.net/api/zenswarm/zenswarm-issuer-set-nonce

  - name: Start oracles in pm2!
    command: pm2 start yarn --update-env --name {{ vmlet_name }} --time -- start
    args:
      chdir: "{{ wd }}"
    loop: "{{ range(0, nodes) | list }}"
    vars:
      vmlet_name: "restroom-mw-{{ item }}"
      wd: "{{ basepath }}/vmlets/{{ vmlet_name }}"
